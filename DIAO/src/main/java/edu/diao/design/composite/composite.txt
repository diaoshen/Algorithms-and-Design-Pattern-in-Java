Composite Design Pattern


Generic Steps 

	1. Create interface that abstract common operations that leaf and composite both have.  Both leaf and composite class must inherit from this interface
	2. Create leaf class
	3. Create composite class that uses any data structure to store a collection of leaf and or composite 
	
	
	KEY: The reason why the composite class can hold a single leaf object or another composite is because both composite and leaf is inherited from the interface
		 this is similar to factory design(Polymorphism)
	

Example : 

	1. Create interface "Employee"  , the common method is   showEmployeeDetails() : void
	2. Create leaf classes  : Dev implements Employee , Manager implements Employee
	3. Create composite class : Department implements Employee 
	4. Create Company class (main class) : You then can create leaf objects.. add to composite , and create more composite and merge into 1 big composite and run the common method
	
	
	
	
	NOTE: POLYMORPHISM IS THE KEY!